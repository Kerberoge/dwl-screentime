diff --git a/config.def.h b/config.def.h
index 22d2171..6f3dbf1 100644
--- a/config.def.h
+++ b/config.def.h
@@ -13,6 +13,8 @@ static const float focuscolor[]            = COLOR(0x005577ff);
 static const float urgentcolor[]           = COLOR(0xff0000ff);
 /* This conforms to the xdg-protocol. Set the alpha to zero to restore the old behavior */
 static const float fullscreen_bg[]         = {0.1f, 0.1f, 0.1f, 1.0f}; /* You can also use glsl colors */
+static const char appid_file[]             = "/tmp/dwl/appid";
+static const char title_file[]             = "/tmp/dwl/title";
 
 /* tagging - TAGCOUNT must be no greater than 31 */
 #define TAGCOUNT (9)
diff --git a/dwl.c b/dwl.c
index a2711f6..db238fc 100644
--- a/dwl.c
+++ b/dwl.c
@@ -9,6 +9,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/wait.h>
+#include <sys/stat.h>
 #include <time.h>
 #include <unistd.h>
 #include <wayland-server-core.h>
@@ -351,6 +352,7 @@ static void urgent(struct wl_listener *listener, void *data);
 static void view(const Arg *arg);
 static void virtualkeyboard(struct wl_listener *listener, void *data);
 static void virtualpointer(struct wl_listener *listener, void *data);
+static void writeinfo(Client *c);
 static Monitor *xytomon(double x, double y);
 static void xytonode(double x, double y, struct wlr_surface **psurface,
 		Client **pc, LayerSurface **pl, double *nx, double *ny);
@@ -1394,6 +1396,7 @@ focusclient(Client *c, int lift)
 		}
 	}
 	printstatus();
+	writeinfo(c);
 
 	if (!c) {
 		/* With no client, all we have left is to clear focus */
@@ -2431,6 +2434,8 @@ setup(void)
 {
 	int i, sig[] = {SIGCHLD, SIGINT, SIGTERM, SIGPIPE};
 	struct sigaction sa = {.sa_flags = SA_RESTART, .sa_handler = handlesig};
+	struct stat st;
+
 	sigemptyset(&sa.sa_mask);
 
 	for (i = 0; i < (int)LENGTH(sig); i++)
@@ -2643,6 +2648,12 @@ setup(void)
 		fprintf(stderr, "failed to setup XWayland X server, continuing without it\n");
 	}
 #endif
+
+	/* Dwl stores information, such as the appid of the currently focused
+	 * client, in files under /tmp/dwl
+	 */
+	if (stat("/tmp/dwl", &st) == -1)
+		mkdir("/tmp/dwl", 0755);
 }
 
 void
@@ -2983,6 +2994,26 @@ virtualpointer(struct wl_listener *listener, void *data)
 		wlr_cursor_map_input_to_output(cursor, device, event->suggested_output);
 }
 
+void
+writeinfo(Client *c)
+{
+	FILE *appid_f = fopen(appid_file, "w");
+	FILE *title_f = fopen(title_file, "w");
+	const char *appid = "none", *title = "none";
+
+	if (!appid_f || !title_f) return;
+
+	if (c) {
+		appid = client_get_appid(c);
+		title = client_get_title(c);
+	}
+
+	fputs(appid, appid_f);
+	fputs(title, title_f);
+	fclose(appid_f);
+	fclose(title_f);
+}
+
 Monitor *
 xytomon(double x, double y)
 {
